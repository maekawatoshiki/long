---
source: lexer/src/src_lexer.rs
expression: read_all_tokens(&mut l)

---
[
    Token {
        kind: Symbol(
            OpeningParen,
        ),
        leading_space: false,
        loc: 1:1,
    },
    Token {
        kind: Symbol(
            ClosingParen,
        ),
        leading_space: false,
        loc: 1:2,
    },
    Token {
        kind: Symbol(
            OpeningBrace,
        ),
        leading_space: false,
        loc: 1:3,
    },
    Token {
        kind: Symbol(
            ClosingBrace,
        ),
        leading_space: false,
        loc: 1:4,
    },
    Token {
        kind: Symbol(
            OpeningBoxBracket,
        ),
        leading_space: false,
        loc: 1:5,
    },
    Token {
        kind: Symbol(
            ClosingBoxBracket,
        ),
        leading_space: false,
        loc: 1:6,
    },
    Token {
        kind: Symbol(
            Comma,
        ),
        leading_space: false,
        loc: 1:7,
    },
    Token {
        kind: Symbol(
            Semicolon,
        ),
        leading_space: false,
        loc: 1:8,
    },
    Token {
        kind: Symbol(
            Colon,
        ),
        leading_space: false,
        loc: 1:9,
    },
    Token {
        kind: Symbol(
            Dot,
        ),
        leading_space: false,
        loc: 1:10,
    },
    Token {
        kind: Symbol(
            Add,
        ),
        leading_space: false,
        loc: 1:11,
    },
    Token {
        kind: Symbol(
            Sub,
        ),
        leading_space: false,
        loc: 1:12,
    },
    Token {
        kind: Symbol(
            Asterisk,
        ),
        leading_space: false,
        loc: 1:13,
    },
    Token {
        kind: Symbol(
            Div,
        ),
        leading_space: false,
        loc: 1:14,
    },
    Token {
        kind: Symbol(
            Mod,
        ),
        leading_space: false,
        loc: 1:15,
    },
    Token {
        kind: Symbol(
            Not,
        ),
        leading_space: false,
        loc: 1:16,
    },
    Token {
        kind: Symbol(
            BitwiseNot,
        ),
        leading_space: false,
        loc: 1:17,
    },
    Token {
        kind: Symbol(
            And,
        ),
        leading_space: false,
        loc: 1:18,
    },
    Token {
        kind: Symbol(
            Lt,
        ),
        leading_space: false,
        loc: 1:19,
    },
    Token {
        kind: Symbol(
            Gt,
        ),
        leading_space: false,
        loc: 1:20,
    },
    Token {
        kind: Symbol(
            Xor,
        ),
        leading_space: false,
        loc: 1:21,
    },
    Token {
        kind: Symbol(
            Or,
        ),
        leading_space: false,
        loc: 1:22,
    },
    Token {
        kind: Symbol(
            Question,
        ),
        leading_space: false,
        loc: 1:23,
    },
    Token {
        kind: Symbol(
            Assign,
        ),
        leading_space: false,
        loc: 1:24,
    },
    Token {
        kind: Symbol(
            Hash,
        ),
        leading_space: false,
        loc: 1:25,
    },
    Token {
        kind: Symbol(
            Inc,
        ),
        leading_space: false,
        loc: 1:26,
    },
    Token {
        kind: Symbol(
            Dec,
        ),
        leading_space: false,
        loc: 1:28,
    },
    Token {
        kind: Symbol(
            DoubleColon,
        ),
        leading_space: false,
        loc: 1:30,
    },
    Token {
        kind: Symbol(
            Arrow,
        ),
        leading_space: false,
        loc: 1:32,
    },
    Token {
        kind: Symbol(
            Shl,
        ),
        leading_space: false,
        loc: 1:34,
    },
    Token {
        kind: Symbol(
            Shr,
        ),
        leading_space: false,
        loc: 1:36,
    },
    Token {
        kind: Symbol(
            Le,
        ),
        leading_space: false,
        loc: 1:38,
    },
    Token {
        kind: Symbol(
            Ge,
        ),
        leading_space: false,
        loc: 1:40,
    },
    Token {
        kind: Symbol(
            Eq,
        ),
        leading_space: false,
        loc: 1:42,
    },
    Token {
        kind: Symbol(
            Ne,
        ),
        leading_space: false,
        loc: 1:44,
    },
    Token {
        kind: Symbol(
            LAnd,
        ),
        leading_space: false,
        loc: 1:46,
    },
    Token {
        kind: Symbol(
            LOr,
        ),
        leading_space: false,
        loc: 1:48,
    },
    Token {
        kind: Symbol(
            AssignAdd,
        ),
        leading_space: false,
        loc: 1:50,
    },
    Token {
        kind: Symbol(
            AssignSub,
        ),
        leading_space: false,
        loc: 1:52,
    },
    Token {
        kind: Symbol(
            AssignMul,
        ),
        leading_space: false,
        loc: 1:54,
    },
    Token {
        kind: Symbol(
            AssignDiv,
        ),
        leading_space: false,
        loc: 1:56,
    },
    Token {
        kind: Symbol(
            AssignMod,
        ),
        leading_space: false,
        loc: 1:58,
    },
    Token {
        kind: Symbol(
            AssignAnd,
        ),
        leading_space: false,
        loc: 1:60,
    },
    Token {
        kind: Symbol(
            AssignXor,
        ),
        leading_space: false,
        loc: 1:62,
    },
    Token {
        kind: Symbol(
            AssignOr,
        ),
        leading_space: false,
        loc: 1:64,
    },
    Token {
        kind: Symbol(
            AssignShl,
        ),
        leading_space: false,
        loc: 1:66,
    },
    Token {
        kind: Symbol(
            AssignShr,
        ),
        leading_space: false,
        loc: 1:69,
    },
    Token {
        kind: Symbol(
            AssignLAnd,
        ),
        leading_space: false,
        loc: 1:72,
    },
    Token {
        kind: Symbol(
            AssignLOr,
        ),
        leading_space: false,
        loc: 1:75,
    },
    Token {
        kind: Ident(
            "sizeof",
        ),
        leading_space: false,
        loc: 1:78,
    },
]
